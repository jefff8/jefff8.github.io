<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[去哪儿网项目实战]]></title>
    <url>%2F2018%2F08%2F12%2F%E5%8E%BB%E5%93%AA%E5%84%BF%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[前言：&emsp;这是一篇使用vue前端框架从入门到实战的学习记录，内容主要是项目中所使用的技术与遇到的问题，来不及解释了直接来吧！ 一、创建项目&emsp;默认已安装好node.js环境&emsp;关于ESlint的语法提示机制是否使用个人感觉还是根据个人编写代码风格习惯而定。本人在刚开始开发过程中尝试使用会报出很多格式上的错误警告，对于开发效率有了一定影响，最后决定统一使用Vetur插件来格式化代码，暂时还是觉得不错的。 关闭ESlint语法提示如果在新建项目时，已经打开了ESlint，但是又不想使用可在项目配置文件中注释关闭 二、项目目录结构在刚开始使用webpack构建项目的时候，不太清楚项目文件夹的结构，所以先对文件夹进行一定的了解。 三、插件库1.轮播图（vue-awesome-swiper）效果：安装：1npm install vue-awesome-swiper --save 使用：安装完成后需要在main.js文件中引入123import VueAwesomeSwiper from 'vue-awesome-swiper'import 'swiper/dist/css/swiper.css' //轮播图样式Vue.use(VueAwesomeSwiper) 2.FastClick&emsp;官方解释：移动设备上的浏览器默认会在用户点击屏幕大约延迟300毫秒后才会触发点击事件，这是为了检查用户是否在做双击。为了能够立即响应用户的点击事件，才有了FastClick。 安装：1npm install fastclick 使用：main.js中全局引入 12import fastclick from 'fastclick'fastclick.attach(document.body) 3.reset.css安装：1npm install --save reset-css 使用：main.js引入1import 'styles/reset.css' &emsp;在进行页面开发的时候，为了让页面获得浏览器跨浏览器的兼容性，需要用重置文件css代码覆盖浏览器默认的样式来统一样式。&emsp;rem：根据html的font-size大小来变化，正是基于这个出发，我们可以在每一个设备下根据设备的宽度设置对应的html字号，从而实现了自适应布局。4.border.css&emsp;统一的边框样式5.iconfont.css&emsp;引用阿里图标库，可自行选择合适的图标打包下载。6.better-scroll（滚动条）&emsp;better-scroll是一个插件，旨在解决移动端的滚动环境（已经支持PC）。核心受到iscroll实现的启发，因此更好滚动的API总体上与iscroll兼容。更重要的是，更好的滚动还扩展了一些功能，并根据iscroll优化了性能。安装：1npm install better-scroll --save 使用：在组件上引入12345import Bscroll from "better-scroll";//初始化mounted() &#123; this.scroll = new Bscroll(this.$refs.wrapper);&#125; 7.axios&emsp;Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。安装：1npm install axios --save 使用：在项目config/index.js文件中配置api接口axios请求数据123456789101112131415import axios from 'axios' // 引入axios请求// 举例axios获取城市列表数据methods: &#123; getCityInfo() &#123; axios.get("/api/city.json").then(this.getCityInfoSucc); &#125;, getCityInfoSucc(res) &#123; res = res.data; if (res.ret &amp;&amp; res.data) &#123; const data = res.data; this.hotCities = data.hotCities; this.cities = data.cities; &#125; &#125;&#125; 8.Vuex&emsp;Vuex是一个专为Vue.js应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。使用原因：&emsp;对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。&emsp;对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。&emsp;因此，我们为什么不把组件的共享状态抽取出来，以一个全局单例模式管理呢？在这种模式下，我们的组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！&emsp;另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。安装：1npm install vuex --save 原理：使用：在main.js文件中配置创建的store仓库（文件夹）]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Hexo博客初体验]]></title>
    <url>%2F2018%2F06%2F02%2F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[摘要：这是一篇关于小白如何使用Github Pages和Hexo搭建属于自己的博客： 如何使用和配置Hexo框架 如何将Hexo部署到自己的github项目中 前言：很久之前早就想弄一个自己的博客，但是迟迟没有落实，大概是一直没有找到自己想要的那种博客（借口~），今天看了stormzhang公众号的一篇文章《我为什么坚持写博客？》推荐的hexo，上网了解了下发现这大概就是我想要的吧~经过一下午折腾终于搭建属于自己的博客，我觉得很有必要把整个过程写下来分享给大家互相学习使用。不废话了直奔主题！ 一、环境配置安装node.js 下载node.js选择自己电脑版本的本人是windows 64位，直接傻瓜式下载使用即可 安装git 下载git同样是根据电脑版本下载 下载完成，通过在命令行输入 git version 查看是否安装成功，有输出版本号说明安装成功。 鼠标邮件菜单里就多了Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。 二、Hexo安装①桌面鼠标右键，选择Git Bash Here，输入下面命令： npm install -g hexo-cli 如果出现说明hexo已经安装成功（针对windows） ②然后需要创建一个文件夹来存放hexo文件（相当于你的博客文件夹）例如：我在电脑上手动创建了一个名叫blog的文件夹，然后需要执行以下命令初始化： hexo init e:\blog 进入该目录： cd e:\blog 执行以下命令，系统会可以根据package.json文件中dependencies的配置安装所有依赖包： npm install 然后生成部署文件，启动本地服务 1.hexo g # hexo generate, 生成静态文件 2.hexo s # hexo server，可以在http://localhost:4000/ 查看 其他hexo命令用法可参考 Hexo官网 接下来我们可以在本地预览自己的博客了，打开http://localhost:4000/ 三、Github Pages配置顾名思义需要一个Github账号，然后创建一个仓库： 注意：仓库的名字必须是username/username.github.io注意：仓库的名字必须是username/username.github.io注意：仓库的名字必须是username/username.github.io例如：我的用户名为jefff8,那么Repository name必须命名为：jefff8.github.io重要的事情说三遍！！！（当初踩过的坑…）配置SSH密钥上传文件需要配置ssh key，所以首先需要检查本机电脑是否已经存在SSH keys，如果存在删除 .ssh文件夹里面的所有文件（如果不存在的忽略这条）然后设置下name和email git config --global user.name &quot;&lt;your name&gt;&quot; git config --global user.email &quot;&lt;your email&gt;&quot;name的名字随便起，email我建议填github同一个邮箱生成SSH密钥输入以下命令生成，邮箱是github里面注册的邮箱，ok回车： ssh-keygen -t rsa -C &quot;XXXXX@qq.com&quot;一路按回车键即可，如果设置了密码请记住。这一步在~/.ssh/下生成了两个文件id_rsa 和 id_rsa.pub获取SSH密钥 $ cat ~/.ssh/id_rsa.pub新建一个key，然后拷贝下生成的keykey粘贴刚刚生成的密钥，title随便起注意：重点圈起来，key下面的√记得一定要打哦！不然后面会报错，又是踩过的坑说多都是泪… 提交后，输入一下命令： ssh git@github.com 如果出现这样的内容： The authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &apos;github.com,192.30.252.128&apos; (RSA) to the list of known hosts. Hi git-xuhao! You&apos;ve successfully authenticated, but GitHub does not provide shell access. Connection to github.com closed. 大致恭喜你配置成功！！这时钥匙也变绿啦 四、部署到Github配置_config.yml 编辑刚刚新建的文件夹（e:/blog）根目录内,找到该文件，找到并修改Deployment部分（一般在最后） 注意：在每个填入前加个空格(否则会有错误)，其中repository填的是刚刚github新建仓库的SSH地址。 安装Git包，执行以下命令： npm install hexo-deployer-git --save cd到根目录，执行以下命令即可： hexo g hexo d now，你可以输入https://username.github.io来访问自己的博客啦（开森）！！！ 五、关于Hexo使用①更换主题 可以进入Hexo官网主题专栏找到自己想要的主题（个人强推：next） 找到想要的然后到克隆主题啦，十分简单，复制github地址输入一下命令： git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) 成功后，你会发现themes文件夹里面多了一个注意文件夹 然后修改下根目录配置文件_config.yml里面的theme：主题名字（主题文件夹名字相同） 重新部署主题，Git Bash cd到根目录，输入一下命令： hexo g hexo s #本地预览 如果满意，就可以输入一下命令上传： hexo d ②新建博客文章 新建一篇文章(md文件)输入以下命令： hexo n &quot;文章标题&quot; 然后会在根目录/source/_posts 下生成你的文章文件，打开编辑器编辑就好（本人使用：MarkdownPad 2） 编写好后只要执行： hexo d -g 就会更新我们的Github库。 有关更多配置使用问题，可以参考Hexo官网文档 ~]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
